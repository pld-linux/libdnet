--- libdnet-1.11/python/dnet.pyx.orig	2006-01-19 07:09:01.000000000 +0100
+++ libdnet-1.11/python/dnet.pyx	2008-03-21 19:09:11.058710426 +0100
@@ -46,7 +46,6 @@
     memcpy(dst, src, n)
 
 cdef __oserror():
-    cdef extern int errno
     return strerror(errno)
 
 def __iter_append(entry, l):
--- libdnet-1.11/python/dnet.pyx.org	2008-11-02 01:02:58.687884947 +0100
+++ libdnet-1.11/python/dnet.pyx	2008-11-02 01:04:19.111626507 +0100
@@ -159,7 +159,7 @@
     return PyString_FromStringAndSize(ea.data, 6)
 
 def eth_pack_hdr(dst=ETH_ADDR_BROADCAST, src=ETH_ADDR_BROADCAST,
-                 type=ETH_TYPE_IP):
+		ptype=ETH_TYPE_IP):
     """Return a packed binary string representing an Ethernet header.
 	
     Keyword arguments:
@@ -171,7 +171,7 @@
     cdef eth_addr_t s, d
     __memcpy(s.data, src, 6)
     __memcpy(d.data, dst, 6)
-    __eth_pack_hdr(hdr, d, s, type)
+    __eth_pack_hdr(hdr, d, s, ptype)
     return PyString_FromStringAndSize(hdr, 14)
 
 #
@@ -440,7 +440,7 @@
     """
     cdef addr_t _addr
     
-    def __init__(self, addrtxt=None, type=ADDR_TYPE_NONE):
+    def __init__(self, addrtxt=None, ptype=ADDR_TYPE_NONE):
         if addrtxt != None and addr_aton(addrtxt, &self._addr) < 0:
             if PyString_Size(addrtxt) == 4:
                 self._addr.addr_type = ADDR_TYPE_IP
@@ -784,7 +784,7 @@
 cdef extern from *:
     void __icmp_pack_hdr "icmp_pack_hdr" (char *hdr, int type, int code)
     
-def icmp_pack_hdr(type, code):
+def icmp_pack_hdr(ptype, code):
     """Return a packed binary string representing an ICMP header.
 
     Keyword arguments:
@@ -792,7 +792,7 @@
     code -- ICMP code		(8-bit integer)
     """
     cdef char buf[4]
-    __icmp_pack_hdr(buf, type, code)
+    __icmp_pack_hdr(buf, ptype, code)
     return PyString_FromStringAndSize(buf, sizeof(buf))
 
 #
