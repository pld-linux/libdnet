diff -ruN libdnet-1.11.orig/test/dnet/Makefile.am libdnet-1.11/test/dnet/Makefile.am
--- libdnet-1.11.orig/test/dnet/Makefile.am	2004-05-04 23:20:11.000000000 +0200
+++ libdnet-1.11/test/dnet/Makefile.am	2011-12-03 23:05:24.898192382 +0100
@@ -5,7 +5,7 @@
 sbin_PROGRAMS = dnet
 
 dnet_SOURCES = addr.c arp.c aton.c aton.h dnet.c eth.c fw.c hex.c \
-	icmp.c intf.c ip.c mod.h rand.c route.c send.c tcp.c udp.c
+	icmp.c intf.c ip.c ip6.c mod.h rand.c route.c send.c tcp.c udp.c
 
 man_MANS = dnet.8
 
diff -ruN libdnet-1.11.orig/test/dnet/Makefile.in libdnet-1.11/test/dnet/Makefile.in
--- libdnet-1.11.orig/test/dnet/Makefile.in	2006-01-19 09:24:46.000000000 +0100
+++ libdnet-1.11/test/dnet/Makefile.in	2011-12-03 23:05:24.899192576 +0100
@@ -106,7 +106,7 @@
 sbin_PROGRAMS = dnet
 
 dnet_SOURCES = addr.c arp.c aton.c aton.h dnet.c eth.c fw.c hex.c \
-	icmp.c intf.c ip.c mod.h rand.c route.c send.c tcp.c udp.c
+	icmp.c intf.c ip.c ip6.c mod.h rand.c route.c send.c tcp.c udp.c
 
 
 man_MANS = dnet.8
@@ -123,8 +123,9 @@
 
 am_dnet_OBJECTS = addr.$(OBJEXT) arp.$(OBJEXT) aton.$(OBJEXT) \
 	dnet.$(OBJEXT) eth.$(OBJEXT) fw.$(OBJEXT) hex.$(OBJEXT) \
-	icmp.$(OBJEXT) intf.$(OBJEXT) ip.$(OBJEXT) rand.$(OBJEXT) \
-	route.$(OBJEXT) send.$(OBJEXT) tcp.$(OBJEXT) udp.$(OBJEXT)
+	icmp.$(OBJEXT) intf.$(OBJEXT) ip.$(OBJEXT) ip6.$(OBJEXT) \
+	rand.$(OBJEXT) route.$(OBJEXT) send.$(OBJEXT) tcp.$(OBJEXT) \
+	udp.$(OBJEXT)
 dnet_OBJECTS = $(am_dnet_OBJECTS)
 dnet_DEPENDENCIES = $(top_builddir)/src/libdnet.la
 dnet_LDFLAGS =
diff -ruN libdnet-1.11.orig/test/dnet/aton.c libdnet-1.11/test/dnet/aton.c
--- libdnet-1.11.orig/test/dnet/aton.c	2002-10-14 17:42:10.000000000 +0200
+++ libdnet-1.11/test/dnet/aton.c	2011-12-03 23:06:18.852669377 +0100
@@ -26,6 +26,8 @@
 
 	if (strcmp(string, "ip") == 0)
 		*type = htons(ETH_TYPE_IP);
+	else if (strcmp(string, "ip6") == 0 || strcmp(string, "ipv6") == 0)
+		*type = htons(ETH_TYPE_IPV6);
 	else if (strcmp(string, "arp") == 0)
 		*type = htons(ETH_TYPE_ARP);
 	else {
diff -ruN libdnet-1.11.orig/test/dnet/dnet.8 libdnet-1.11/test/dnet/dnet.8
--- libdnet-1.11.orig/test/dnet/dnet.8	2002-04-01 09:11:34.000000000 +0200
+++ libdnet-1.11/test/dnet/dnet.8	2011-12-03 23:05:24.899192576 +0100
@@ -88,6 +88,21 @@
 .Ar protocol
 may be specified by name, or as a hex, octal, or decimal number.
 .It Xo
+.Nm ip6
+.Op Nm tc Ar num
+.Op Nm flow Ar num
+.Op Nm next Ar protocol
+.Op Nm hlim Ar num
+.Op Nm src Ar host
+.Bk -words
+.Op Nm dst Ar dst
+.Ek
+.Xc
+Prepend the data read from standard input with an IPv6 header on
+standard output. The 
+.Ar protocol
+may be specified by name, or as a hex, octal, or decimal number.
+.It Xo
 .Nm icmp
 .Op Nm type Ar num
 .Op Nm code Ar num
diff -ruN libdnet-1.11.orig/test/dnet/dnet.c libdnet-1.11/test/dnet/dnet.c
--- libdnet-1.11.orig/test/dnet/dnet.c	2004-05-04 23:20:40.000000000 +0200
+++ libdnet-1.11/test/dnet/dnet.c	2011-12-03 23:05:24.899192576 +0100
@@ -28,6 +28,7 @@
 extern struct mod mod_eth;
 extern struct mod mod_arp;
 extern struct mod mod_ip;
+extern struct mod mod_ip6;
 extern struct mod mod_icmp;
 extern struct mod mod_tcp;
 extern struct mod mod_udp;
@@ -37,8 +38,9 @@
 extern struct mod mod_route;
 
 static struct mod *modules[] = {
-	&mod_addr, &mod_hex, &mod_rand, &mod_eth, &mod_arp, &mod_ip, &mod_icmp,
-	&mod_tcp, &mod_udp, &mod_send, &mod_fw, &mod_intf, &mod_route, NULL
+	&mod_addr, &mod_hex, &mod_rand, &mod_eth, &mod_arp, &mod_ip, &mod_ip6,
+	&mod_icmp, &mod_tcp, &mod_udp, &mod_send, &mod_fw, &mod_intf,
+	&mod_route, NULL
 };
 
 static void
diff -ruN libdnet-1.11.orig/test/dnet/ip6.c libdnet-1.11/test/dnet/ip6.c
--- libdnet-1.11.orig/test/dnet/ip6.c	1970-01-01 01:00:00.000000000 +0100
+++ libdnet-1.11/test/dnet/ip6.c	2011-12-03 23:05:24.900192770 +0100
@@ -0,0 +1,101 @@
+/*
+ * ip6.c
+ *
+ */
+
+#include "config.h"
+
+#include <sys/types.h>
+
+#include <err.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <time.h>
+#include <unistd.h>
+
+#include "dnet.h"
+#include "aton.h"
+#include "mod.h"
+
+void
+ip6_usage(void)
+{
+	fprintf(stderr, "Usage: dnet ip6 [tc|flow|next|hlim|src|dst "
+	    "<value>] ... \n");
+	exit(1);
+}
+
+int
+ip6_main(int argc, char *argv[])
+{
+	uint8_t tc = 0, next, hlim = IP6_HLIM_MAX;
+	uint32_t flow = 0;
+	struct addr addr;
+	struct ip6_addr src, dst;
+	u_char *p, buf[IP6_LEN_MAX];	/* XXX */
+	char *name, *value;
+	int c, len;
+	
+	srand(time(NULL));
+
+	next = rand() & 0xff;
+	memset(buf, 0, sizeof buf);
+
+	for (c = 1; c + 1 < argc; c += 2) {
+		name = argv[c];
+		value = argv[c + 1];
+		
+		if (strcmp(name, "tc") == 0)
+			tc = atoi(value);
+		else if (strcmp(name, "flow") == 0)
+			flow = atoi(value);
+		else if (strcmp(name, "hlim") == 0)
+			hlim = atoi(value);
+		else if (strcmp(name, "next") == 0) {
+			if (proto_aton(value, &next) < 0)
+				ip6_usage();
+		} else if (strcmp(name, "src") == 0) {
+			if (addr_aton(value, &addr) < 0 || addr.addr_type != ADDR_TYPE_IP6)
+				ip6_usage();
+			memcpy(&src, &addr.addr_ip6, IP6_ADDR_LEN);
+		} else if (strcmp(name, "dst") == 0) {
+			if (addr_aton(value, &addr) < 0 || addr.addr_type != ADDR_TYPE_IP6)
+				ip6_usage();
+			memcpy(&dst, &addr.addr_ip6, IP6_ADDR_LEN);
+		} else
+			ip6_usage();
+	}
+	argc -= c;
+	argv += c;
+	
+	if (argc != 0)
+		ip6_usage();
+	
+	if (isatty(STDIN_FILENO))
+		errx(1, "can't read IPv6 payload from tty");
+	
+	p = buf + IP6_HDR_LEN;
+	len = sizeof(buf) - (p - buf);
+	
+	while ((c = read(STDIN_FILENO, p, len)) > 0) {
+		p += c;
+		len -= c;
+	}
+	len = p - buf;
+
+	ip6_pack_hdr(buf, tc, flow, len - IP6_HDR_LEN, next, hlim, src, dst);
+
+	ip6_checksum(buf, len);
+	
+	if (write(STDOUT_FILENO, buf, len) != len)
+		err(1, "write");
+
+	return (0);
+}
+
+struct mod mod_ip6 = {
+	"ip6",
+	MOD_TYPE_ENCAP,
+	ip6_main
+};
